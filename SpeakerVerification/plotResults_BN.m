function plotResults_BN()
addpath('Utilities');
outDir = 'figures\';

score_dirs = {
%                 {'scores\PLP_E_D_A_female_WCCN_NormLen_ldaf-300'},...
%                 {'scores\PLP_E_D_A_female_NormLen_unnorm-300_NormLen_ldaf-300'},...
%                 {'scores\PLP_E_D_A_female_NormLen_uplda-300_NormLen_ldaf-300'},...               
                {'scores\MFCC_E_D_A_male_NormLen_WCCN_NormLen_ldaf-300'},...
                {'scores\MFCC_E_D_A_male_NormLen_unnorm-300_NormLen_ldaf-300'},...
                {'scores\MFCC_E_D_A_male_NormLen_uplda-300_NormLen_ldaf-300'},...
                };

% HMM, GMM, DNN
legends = {...
%     'Uncertainty normalization/PLP',...
%     'Uncertain WCCN/PLP',...
%     'LDA with uncertainty compensation/PLP',...
    'LDA with uncertainty compensation/MFCC',...
    'Uncertainty normalization/MFCC',...
    'Uncertain WCCN/MFCC',... 
    };

% Female
% legends = {...
%     'MFCC',...
%     'PLP',...
%     'BN',...
%     'MFCC + BN',...
%     'MFCC, PLP (Fusion)',...
%     'MFCC, BN (Fusion)',...
%     'MFCC, PLP, BN, (Fusion)',...
%     };
% Male
% legends = {...
%     'BN',...
%     'PLP',...
%     'MFCC',...
%     'MFCC + BN',...
%     'MFCC, PLP (Fusion)',...
%     'MFCC, BN (Fusion)',...
%     'MFCC, PLP, BN, (Fusion)',...
%     };

plot_all(score_dirs, legends, 'male', 5185);% 5301)5185
figuresize(22, 22, 'centimeters');

outFile = 'male.pdf';
print('-dpdf', [outDir outFile]);

function plot_all(score_dirs, legends, gender, truesize)
colors = {  
            [0 0 1]	'b'	'blue'
            [1 0 0]	'r'	'red'
            [0 1 0]	'g'	'green'
%             [0 0 1]	'k'	'black'
%             [1 0 0]	'y'	'yellow'
%             [0 1 0]	'm'	'magenta'
            
        };
types = {'-', '-.', '--'};%, '-', '-.', '--'};
figure;
hold on;
dcf_points = {};
for i = 1 : length(score_dirs)
    dir_path = score_dirs{i};
    true_scores = 0;
    false_scores = 0;
    for j = 1 : length(dir_path)
        scores = load([dir_path{j} '.mat']);
        scores = scores.score_det{1,1};
        true_scores = true_scores + scores(1:truesize) / length(dir_path);
        false_scores = false_scores + scores(truesize+1:end) / length(dir_path);
    end
    [eer, minDcf08, dcf10, ~, ~, dcf_points{i}] = my_eer([true_scores; false_scores], [ones(length(true_scores), 1);...
    zeros(length(false_scores), 1)], true, colors{i, 1}, types{i});
    fprintf('EER : %.2f, NDCF08 : %.4f, NDCF10 : %.4f\n', eer, minDcf08 / 10, dcf10 * 10);
end
h = legend(legends);
set(h, 'FontSize', 18)
set(h, 'FontName', 'Times New Roman')
h = xlabel ('False Positive Rate (FPR) [%]');
set(h, 'FontSize', 18)
set(h, 'FontName', 'Times New Roman')
h = ylabel ('False Negative Rate (FNR) [%]');
set(h, 'FontSize', 18)
set(h, 'FontName', 'Times New Roman')
% for i = 1 : length(score_dirs)
%     s1 = scatter(dcf_points{i}(1, 1), dcf_points{i}(1, 2), 120, 's', 'filled', 'MarkerFaceColor', colors{i, 1});
%     s1.MarkerEdgeColor = 'k';
%     s1.LineWidth = 0.6;
%     s1 = scatter(dcf_points{i}(2, 1), dcf_points{i}(2, 2), 150, 'p', 'filled', 'MarkerFaceColor', colors{i, 1});
%     s1.MarkerEdgeColor = 'k';
%     s1.LineWidth = 0.6;
% end
